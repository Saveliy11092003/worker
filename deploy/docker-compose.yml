version: '3.8'

services:

  manager:
    build:
      context: ../../crack-manager
    container_name: manager
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      rabbitmq1:
        condition: service_healthy

  worker1:
    build:
      context: ..
    container_name: worker1
    ports:
      - "8081:8080"
    restart: always
    networks:
      - app-network
    environment:
      - SERVER_PORT=8080
      - REQUEST_QUEUE=request_queue_1
    depends_on:
      rabbitmq1:
        condition: service_healthy

  worker2:
    build:
      context: ..
    container_name: worker2
    restart: always
    ports:
      - "8082:8080"
    networks:
      - app-network
    environment:
      - SERVER_PORT=8080
      - REQUEST_QUEUE=request_queue_2
    depends_on:
      rabbitmq1:
        condition: service_healthy

  worker3:
    build:
      context: ..
    container_name: worker3
    restart: always
    ports:
      - "8083:8080"
    networks:
      - app-network
    environment:
      - SERVER_PORT=8080
      - REQUEST_QUEUE=request_queue_3
    depends_on:
      rabbitmq1:
        condition: service_healthy

  rabbitmq1:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    volumes:
      - rabbitmq1-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq2:
    image: rabbitmq:management
    ports:
      - "5673:5672"
      - "15673:15672"
    networks:
      - app-network
    volumes:
      - rabbitmq2-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

      #  mongo:
      #    container_name: mongo
      #   image: 'mongo:8.0.0-rc13'
      #  restart: always
      # expose:
      #- 27017
      #ports:
      #- "27017:27017"
      #environment:
      # MONGO_INITDB_ROOT_USERNAME: mongo
      # MONGO_INITDB_ROOT_PASSWORD: mongo
      # MONGO_INITDB_DATABASE: manager
      # MONGO_DATABASE: manager
      #MONGO_USERNAME: mongo
      # MONGO_PASSWORD: mongo

  mongo1:
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=manager
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    networks:
      - app-network
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

  mongo2:
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27018" ]
    ports:
      - "27018:27018"
    environment:
      - MONGO_INITDB_DATABASE=manager
    networks:
      - app-network
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"

  mongo3:
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27019" ]
    ports:
      - "27019:27019"
    environment:
      - MONGO_INITDB_DATABASE=manager
    networks:
      - app-network
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"

  mongo-init-replica:
    image: mongo:7.0
    container_name: mongo-init-replica
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - app-network
    entrypoint: >
      bash -c "
        sleep 10;
        echo 'Initiating replica set...';
        mongosh --host mongo1:27017 --eval '
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongo1:27017\" },
              { _id: 1, host: \"mongo2:27018\" },
              { _id: 2, host: \"mongo3:27019\" }
            ]
          });
        '
      "

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
  rabbitmq1-data:
  rabbitmq2-data:

networks:
  app-network:
    driver: bridge
